---
- macro: inbound
  condition: >
    (((evt.type in (accept,listen) and evt.dir=<)) and
     (fd.typechar = 4 or fd.typechar = 6) and
     (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8") and
     (fd.ip != "::1") and
     (evt.rawres >= 0 or evt.res = EINPROGRESS))

- macro: inbound_outbound
  condition: >
    (((evt.type in (accept,listen,connect) and evt.dir=<)) and
     (fd.typechar = 4 or fd.typechar = 6) and
     (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8") and
     (fd.ip != "::1") and
     (evt.rawres >= 0 or evt.res = EINPROGRESS))

- macro: ssh_port
  condition: (fd.sport=22)

# Allowed CIDR range for interactive SSH connections.
# This is a placeholder. You should replace it with the actual CIDR ranges
# that are allowed in your environment.
- macro: corporate_network
  condition: (fd.cnet = "0.0.0.0/0")

- rule: Disallowed SSH connection
  tags: [thesis, ssh]
  enabled: true
  desc: >
    Detect any new SSH connection on `ssh_port` that is not allowed by the
    `allowed_ssh_networks_incoming` and `allowed_ssh_networks_outgoing` lists.
  condition: >
    inbound_outbound
    and ssh_port
  exceptions:
    - name: e_allowed_ssh_networks_outgoing
      fields: [fd.rnet, fd.is_server]
      comps: [=, =]
      values:
        - ["0.0.0.0/0", false]

    - name: e_allowed_ssh_networks_incoming
      fields: [fd.cnet, fd.is_server]
      comps: [=, =]
      values:
        - ["0.0.0.0/0", true]
  output: >
    Disallowed SSH connection (connection=%fd.name
    lport=%fd.lport rport=%fd.rport fd_type=%fd.type
    fd_proto=fd.l4proto evt_type=%evt.type user=%user.name
    user_uid=%user.uid user_loginuid=%user.loginuid
    process=%proc.name proc_exepath=%proc.exepath
    parent=%proc.pname command=%proc.cmdline
    terminal=%proc.tty %container.info)
  priority: WARNING

- rule: Monitor SSH connections from corporate network
  tags: [thesis, ssh, interactive]
  enabled: true
  desc: >
    Monitor incoming interactive SSH connections from development and operations staff.
  condition: >
    inbound
    and ssh_port
    and corporate_network
  output: >
    Interactive SSH connection (connection=%fd.name
    lport=%fd.lport rport=%fd.rport fd_type=%fd.type
    fd_proto=fd.l4proto evt_type=%evt.type user=%user.name
    user_uid=%user.uid user_loginuid=%user.loginuid
    process=%proc.name proc_exepath=%proc.exepath
    parent=%proc.pname command=%proc.cmdline
    terminal=%proc.tty %container.info)
  priority: NOTICE

- rule: Login by user via serial console
  tags: [thesis, serial]
  enabled: true
  desc: >
    Detect user logins to the system via serial console.
  condition: >
    spawned_process and
    (proc.aname=systemd-logind or proc.aname=login) and
    (proc.aname != sshd) and
    (proc.tty != 0)
  output: >
    User login via serial console (user=%user.name user_uid=%user.uid
    user_loginuid=%user.loginuid process=%proc.name
    proc_exepath=%proc.exepath parent=%proc.pname
    command=%proc.cmdline terminal=%proc.tty)
  priority: ERROR

# Needs to be overridden by the user
- list: sensitive_directories
  items: []

- list: user_allowed_sensitive_directories
  items: []

- rule: Access sensitive directories
  tags: [thesis]
  enabled: true
  desc: >
    Detect malicious operations within sensitive directories.
    This rule is a placeholder and should be customized to fit your environment.
    It is recommended to use the `sensitive_directories` list to define
    the directories that should be monitored.
    The rule will trigger on any read or write operations to files
    within the specified directories.
  condition: >
    fd.name pmatch (sensitive_directories) and
    (open_read or open_write) and
    not user.name in (user_allowed_sensitive_directories)
  output: >
    Access to sensitive file or directory at %fs.path.name (evt_type=%evt.type user=%user.name
    user_uid=%user.uid user_loginuid=%user.loginuid
    process=%proc.name proc_exepath=%proc.exepath
    parent=%proc.pname command=%proc.cmdline
    terminal=%proc.tty %container.info)
  priority: WARNING

- rule: Unexpected server process
  tags: [thesis]
  enabled: true
  desc: >
    Detect unexpected process and port combinations.
    This rule is a placeholder and should be customized to fit your environment.
    It is recommended to use the exceptions list to define
    the processes and ports that are allowed to run on the system.
    The rule will trigger on any process that is not in the exceptions list
    and is listening on a port that is not in the exceptions list.
  condition: >
    evt.type = listen and
    (fd.typechar = 4 or fd.typechar = 6)
  exceptions:
    - name: ssh
      fields: [proc.name, fd.sport]
      comps: [=, =]
      values:
        - ["sshd", "22"]
  output: >
    Unexpected process listening for incoming connections (port=%fd.sport user=%user.name
    user_uid=%user.uid user_loginuid=%user.loginuid
    process=%proc.name proc_exepath=%proc.exepath
    parent=%proc.pname command=%proc.cmdline
    terminal=%proc.tty %container.info)
  priority: WARNING
